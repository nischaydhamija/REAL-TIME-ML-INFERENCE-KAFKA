version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # Create topics
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic input_data --replication-factor 1 --partitions 3
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic predictions --replication-factor 1 --partitions 3
      
      # List topics to verify creation
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  ml-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: ml-api
    ports:
      - "8000:8000"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_INPUT_TOPIC=input_data
      - KAFKA_OUTPUT_TOPIC=predictions
      - MODEL_PATH=/app/models/trained_model.joblib
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
    volumes:
      - ../models:/app/models
      - ../src:/app/src
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ml-consumer:
    build:
      context: ..
      dockerfile: docker/Dockerfile.consumer
    container_name: ml-consumer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_INPUT_TOPIC=input_data
      - KAFKA_OUTPUT_TOPIC=predictions
      - KAFKA_GROUP_ID=ml_inference_group
      - MODEL_PATH=/app/models/trained_model.joblib
      - LOG_LEVEL=INFO
    volumes:
      - ../models:/app/models
      - ../src:/app/src
    depends_on:
      kafka:
        condition: service_healthy
      ml-api:
        condition: service_healthy
    restart: unless-stopped

  data-producer:
    build:
      context: ..
      dockerfile: docker/Dockerfile.producer
    container_name: data-producer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_INPUT_TOPIC=input_data
      - LOG_LEVEL=INFO
    volumes:
      - ../src:/app/src
    depends_on:
      kafka:
        condition: service_healthy
    profiles:
      - producer
    command: ["python", "src/producer/data_producer.py", "--mode", "continuous", "--interval", "2", "--count", "100"]

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    profiles:
      - monitoring

networks:
  default:
    name: kafka-ml-network